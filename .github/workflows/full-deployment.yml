name: 🚀 Full Stack Deployment (Frontend + Backend)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: unschooling-464413
  BACKEND_SERVICE: llm-agents
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy-frontend:
    name: 🎨 Deploy Frontend to Firebase
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'src/') || contains(github.event.head_commit.added, 'src/') || contains(github.event.head_commit.modified, 'public/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📥 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Frontend
      run: npm run build
      
    - name: 🚀 Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        channelId: live
        projectId: unschooling-464413

  deploy-backend:
    name: 🚀 Deploy Backend to Cloud Run
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.added, 'backend/') || github.event_name == 'workflow_dispatch'
    needs: deploy-frontend
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: 🏗️ Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: 📊 Set Project
      run: gcloud config set project ${{ env.PROJECT_ID }}
      
    - name: 🔌 Enable Required APIs
      run: |
        gcloud services enable run.googleapis.com
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable aiplatform.googleapis.com
        
    - name: 🏗️ Build and Push Docker Image
      run: |
        cd backend
        gcloud builds submit --tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }} .
        
    - name: 🚀 Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.BACKEND_SERVICE }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 900 \
          --concurrency 80 \
          --set-env-vars="GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}"
          
    - name: 🌐 Get Service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Backend deployed to: $SERVICE_URL"
        
    - name: ✅ Health Check
      run: |
        SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "🔍 Testing backend health at: $SERVICE_URL/health"
        curl -f "$SERVICE_URL/health" || exit 1
        echo "✅ Backend health check passed!"
        
    - name: 🧪 Test Plan Generation
      run: |
        SERVICE_URL="${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "🧪 Testing plan generation with real data..."
        curl -X POST "$SERVICE_URL/api/generate-plan" \
          -H "Content-Type: application/json" \
          -d '{"profile": {"child_name": "Emma", "child_age": 6, "interests": ["science", "art", "music"], "preferred_learning_style": "visual", "plan_type": "hybrid"}}' \
          --max-time 30 || exit 1
        echo "✅ Plan generation test passed!"
        
    - name: 📝 Deployment Summary
      run: |
        echo "🎉 Full Stack Deployment Successful!"
        echo "🎨 Frontend: https://unschooling.in"
        echo "🚀 Backend: ${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "📊 Project: ${{ env.PROJECT_ID }}"
        echo "🌍 Region: ${{ env.REGION }}"
        echo ""
        echo "✅ Your customised weekly plan page is now live with real data!"
        echo "🔗 Test at: https://unschooling.in/customised-weekly-plan"

  notify-completion:
    name: 📢 Notify Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: 📢 Deployment Status
      run: |
        if [[ "${{ needs.deploy-frontend.result }}" == "success" || "${{ needs.deploy-frontend.result }}" == "skipped" ]] && [[ "${{ needs.deploy-backend.result }}" == "success" || "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Website: https://unschooling.in"
          echo "🔗 Customised Weekly Plan: https://unschooling.in/customised-weekly-plan"
        else
          echo "❌ Deployment failed. Check the logs for details."
          exit 1
        fi
